// Code generated by protoc-gen-go.
// source: intake.proto
// DO NOT EDIT!

/*
Package intake is a generated protocol buffer package.

It is generated from these files:
	intake.proto

It has these top-level messages:
	ExperimentIntakeRequest
	ExperimentIntakeReply
	ExperimentMetadata
*/
package intake

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import elwin_storage "github.com/foolusion/elwinprotos/storage"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ExperimentIntakeRequest creates an experiment in the database and sends a notification for reviewers
type ExperimentIntakeRequest struct {
	Metadata   *ExperimentMetadata       `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Experiment *elwin_storage.Experiment `protobuf:"bytes,2,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *ExperimentIntakeRequest) Reset()                    { *m = ExperimentIntakeRequest{} }
func (m *ExperimentIntakeRequest) String() string            { return proto.CompactTextString(m) }
func (*ExperimentIntakeRequest) ProtoMessage()               {}
func (*ExperimentIntakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExperimentIntakeRequest) GetMetadata() *ExperimentMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ExperimentIntakeRequest) GetExperiment() *elwin_storage.Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

type ExperimentIntakeReply struct {
}

func (m *ExperimentIntakeReply) Reset()                    { *m = ExperimentIntakeReply{} }
func (m *ExperimentIntakeReply) String() string            { return proto.CompactTextString(m) }
func (*ExperimentIntakeReply) ProtoMessage()               {}
func (*ExperimentIntakeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ExperimentMetadata all the junk that elwin doesn't care about
type ExperimentMetadata struct {
	UserID             string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	ProgramManagerID   string `protobuf:"bytes,2,opt,name=programManagerID" json:"programManagerID,omitempty"`
	ProductManagerID   string `protobuf:"bytes,3,opt,name=productManagerID" json:"productManagerID,omitempty"`
	Hypothesis         string `protobuf:"bytes,4,opt,name=hypothesis" json:"hypothesis,omitempty"`
	Kpi                string `protobuf:"bytes,5,opt,name=kpi" json:"kpi,omitempty"`
	TimeBound          bool   `protobuf:"varint,6,opt,name=timeBound" json:"timeBound,omitempty"`
	PlannedStartTime   string `protobuf:"bytes,7,opt,name=plannedStartTime" json:"plannedStartTime,omitempty"`
	PlannedEndTime     string `protobuf:"bytes,8,opt,name=plannedEndTime" json:"plannedEndTime,omitempty"`
	ActualStartTime    string `protobuf:"bytes,9,opt,name=actualStartTime" json:"actualStartTime,omitempty"`
	ActualEndTime      string `protobuf:"bytes,10,opt,name=actualEndTime" json:"actualEndTime,omitempty"`
	ActionPlanNegative string `protobuf:"bytes,11,opt,name=actionPlanNegative" json:"actionPlanNegative,omitempty"`
	ActionPlanNeutral  string `protobuf:"bytes,12,opt,name=actionPlanNeutral" json:"actionPlanNeutral,omitempty"`
	ExperimentType     string `protobuf:"bytes,13,opt,name=experimentType" json:"experimentType,omitempty"`
}

func (m *ExperimentMetadata) Reset()                    { *m = ExperimentMetadata{} }
func (m *ExperimentMetadata) String() string            { return proto.CompactTextString(m) }
func (*ExperimentMetadata) ProtoMessage()               {}
func (*ExperimentMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExperimentMetadata) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ExperimentMetadata) GetProgramManagerID() string {
	if m != nil {
		return m.ProgramManagerID
	}
	return ""
}

func (m *ExperimentMetadata) GetProductManagerID() string {
	if m != nil {
		return m.ProductManagerID
	}
	return ""
}

func (m *ExperimentMetadata) GetHypothesis() string {
	if m != nil {
		return m.Hypothesis
	}
	return ""
}

func (m *ExperimentMetadata) GetKpi() string {
	if m != nil {
		return m.Kpi
	}
	return ""
}

func (m *ExperimentMetadata) GetTimeBound() bool {
	if m != nil {
		return m.TimeBound
	}
	return false
}

func (m *ExperimentMetadata) GetPlannedStartTime() string {
	if m != nil {
		return m.PlannedStartTime
	}
	return ""
}

func (m *ExperimentMetadata) GetPlannedEndTime() string {
	if m != nil {
		return m.PlannedEndTime
	}
	return ""
}

func (m *ExperimentMetadata) GetActualStartTime() string {
	if m != nil {
		return m.ActualStartTime
	}
	return ""
}

func (m *ExperimentMetadata) GetActualEndTime() string {
	if m != nil {
		return m.ActualEndTime
	}
	return ""
}

func (m *ExperimentMetadata) GetActionPlanNegative() string {
	if m != nil {
		return m.ActionPlanNegative
	}
	return ""
}

func (m *ExperimentMetadata) GetActionPlanNeutral() string {
	if m != nil {
		return m.ActionPlanNeutral
	}
	return ""
}

func (m *ExperimentMetadata) GetExperimentType() string {
	if m != nil {
		return m.ExperimentType
	}
	return ""
}

func init() {
	proto.RegisterType((*ExperimentIntakeRequest)(nil), "elwin.intake.ExperimentIntakeRequest")
	proto.RegisterType((*ExperimentIntakeReply)(nil), "elwin.intake.ExperimentIntakeReply")
	proto.RegisterType((*ExperimentMetadata)(nil), "elwin.intake.ExperimentMetadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExperimentIntake service

type ExperimentIntakeClient interface {
	// ExperimentIntake takes a request from a web form and creates the
	// experiment in the data store.
	ExperimentIntake(ctx context.Context, in *ExperimentIntakeRequest, opts ...grpc.CallOption) (*ExperimentIntakeReply, error)
}

type experimentIntakeClient struct {
	cc *grpc.ClientConn
}

func NewExperimentIntakeClient(cc *grpc.ClientConn) ExperimentIntakeClient {
	return &experimentIntakeClient{cc}
}

func (c *experimentIntakeClient) ExperimentIntake(ctx context.Context, in *ExperimentIntakeRequest, opts ...grpc.CallOption) (*ExperimentIntakeReply, error) {
	out := new(ExperimentIntakeReply)
	err := grpc.Invoke(ctx, "/elwin.intake.ExperimentIntake/ExperimentIntake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExperimentIntake service

type ExperimentIntakeServer interface {
	// ExperimentIntake takes a request from a web form and creates the
	// experiment in the data store.
	ExperimentIntake(context.Context, *ExperimentIntakeRequest) (*ExperimentIntakeReply, error)
}

func RegisterExperimentIntakeServer(s *grpc.Server, srv ExperimentIntakeServer) {
	s.RegisterService(&_ExperimentIntake_serviceDesc, srv)
}

func _ExperimentIntake_ExperimentIntake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentIntakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentIntakeServer).ExperimentIntake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elwin.intake.ExperimentIntake/ExperimentIntake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentIntakeServer).ExperimentIntake(ctx, req.(*ExperimentIntakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentIntake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elwin.intake.ExperimentIntake",
	HandlerType: (*ExperimentIntakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExperimentIntake",
			Handler:    _ExperimentIntake_ExperimentIntake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intake.proto",
}

func init() { proto.RegisterFile("intake.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x80, 0xe5, 0x04, 0x42, 0x32, 0x4d, 0x20, 0xac, 0x04, 0x75, 0xa3, 0xaa, 0x8a, 0x42, 0x81,
	0x50, 0x81, 0x2d, 0xca, 0x09, 0xc4, 0xa9, 0xa2, 0x87, 0x1e, 0x8a, 0x90, 0xe9, 0x89, 0xdb, 0x34,
	0x1e, 0x9c, 0x55, 0xed, 0x5d, 0x63, 0x8f, 0x0b, 0xb9, 0x22, 0x9e, 0x00, 0x4e, 0x3c, 0x17, 0xaf,
	0xc0, 0x73, 0x20, 0x94, 0xb1, 0x1b, 0xe7, 0xa7, 0x88, 0x9b, 0xf7, 0x9b, 0x6f, 0x7e, 0x56, 0x9e,
	0x85, 0xae, 0x36, 0x8c, 0x17, 0xe4, 0xa5, 0x99, 0x65, 0xab, 0xba, 0x14, 0x7f, 0xd6, 0xc6, 0x2b,
	0xd9, 0x60, 0x37, 0xb2, 0x36, 0x8a, 0xc9, 0xc7, 0x54, 0xfb, 0x68, 0x8c, 0x65, 0x64, 0x6d, 0x4d,
	0x5e, 0xba, 0x83, 0x5e, 0xce, 0x36, 0xc3, 0xa8, 0x4a, 0x1d, 0x7d, 0x77, 0x60, 0xfb, 0xf8, 0x4b,
	0x4a, 0x99, 0x4e, 0xc8, 0xf0, 0x89, 0x54, 0x08, 0xe8, 0x53, 0x41, 0x39, 0xab, 0xd7, 0xd0, 0x4e,
	0x88, 0x31, 0x44, 0x46, 0xd7, 0x19, 0x3a, 0xe3, 0xad, 0xc3, 0xa1, 0xb7, 0xdc, 0xc9, 0xab, 0x13,
	0x4f, 0x2b, 0x2f, 0x58, 0x64, 0xa8, 0x97, 0x00, 0xb4, 0x88, 0xbb, 0x0d, 0xc9, 0xdf, 0xa9, 0xf2,
	0xaf, 0x66, 0xa8, 0x0b, 0x04, 0x4b, 0xf2, 0x68, 0x1b, 0xee, 0x6d, 0xce, 0x94, 0xc6, 0xb3, 0xd1,
	0x9f, 0x26, 0xa8, 0xcd, 0xa6, 0xea, 0x3e, 0xb4, 0x8a, 0x9c, 0xb2, 0x93, 0x37, 0x32, 0x66, 0x27,
	0xa8, 0x4e, 0xea, 0x00, 0xfa, 0x69, 0x66, 0xa3, 0x0c, 0x93, 0x53, 0x34, 0x18, 0x89, 0xd1, 0x10,
	0x63, 0x83, 0x57, 0x6e, 0x58, 0x4c, 0xb8, 0x76, 0x9b, 0x0b, 0x77, 0x85, 0xab, 0x3d, 0x80, 0xe9,
	0x2c, 0xb5, 0x3c, 0xa5, 0x5c, 0xe7, 0xee, 0x0d, 0xb1, 0x96, 0x88, 0xea, 0x43, 0xf3, 0x22, 0xd5,
	0xee, 0x4d, 0x09, 0xcc, 0x3f, 0xd5, 0x2e, 0x74, 0x58, 0x27, 0x74, 0x64, 0x0b, 0x13, 0xba, 0xad,
	0xa1, 0x33, 0x6e, 0x07, 0x35, 0x90, 0xde, 0x31, 0x1a, 0x43, 0xe1, 0x7b, 0xc6, 0x8c, 0xcf, 0x74,
	0x42, 0xee, 0xad, 0xaa, 0xf7, 0x1a, 0x57, 0x8f, 0xe0, 0x76, 0xc5, 0x8e, 0x4d, 0x28, 0x66, 0x5b,
	0xcc, 0x35, 0xaa, 0xc6, 0x70, 0x07, 0x27, 0x5c, 0x60, 0x5c, 0x97, 0xec, 0x88, 0xb8, 0x8e, 0xd5,
	0x3e, 0xf4, 0x4a, 0x74, 0x55, 0x10, 0xc4, 0x5b, 0x85, 0xca, 0x03, 0x85, 0x93, 0xf9, 0x22, 0xbd,
	0x8b, 0xd1, 0xbc, 0xa5, 0x08, 0x59, 0x5f, 0x92, 0xbb, 0x25, 0xea, 0x35, 0x11, 0xf5, 0x14, 0xee,
	0x2e, 0xd3, 0x82, 0x33, 0x8c, 0xdd, 0xae, 0xe8, 0x9b, 0x81, 0xf9, 0xad, 0xea, 0xff, 0x7f, 0x36,
	0x4b, 0xc9, 0xed, 0x95, 0xb7, 0x5a, 0xa5, 0x87, 0x3f, 0x1d, 0xe8, 0xaf, 0xaf, 0x86, 0xfa, 0x76,
	0x1d, 0x7c, 0xf8, 0xaf, 0x55, 0x5d, 0xd9, 0xf1, 0xc1, 0x83, 0xff, 0x69, 0xf3, 0xb5, 0xdb, 0xff,
	0xfa, 0xeb, 0xf7, 0x8f, 0xc6, 0xde, 0x68, 0x47, 0xde, 0xd4, 0xe5, 0x73, 0xbf, 0x9e, 0xea, 0x59,
	0x99, 0xf8, 0xca, 0x39, 0x38, 0x7a, 0xf2, 0xe1, 0x71, 0xa4, 0x79, 0x5a, 0x9c, 0x7b, 0x13, 0x9b,
	0xf8, 0x1f, 0xad, 0x8d, 0x8b, 0x5c, 0x5b, 0xe3, 0x4b, 0x03, 0x79, 0x6d, 0xb9, 0x5f, 0xda, 0xe7,
	0x2d, 0x39, 0xbe, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x7c, 0xd7, 0x13, 0xc7, 0x03, 0x00,
	0x00,
}
